{"version":3,"sources":["logo.svg","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_RGB","DEFAULT_HSL","marks","value","label","valuetext","valueLabelFormat","Cell","xVal","yVal","x","y","alive","colorDisplay","colorRGB","colorHSL","deathTime","age","data","React","Component","Game","props","runGame","setState","isRunning","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleClear","size","state","newBoard","makeEmptyBoard","board","handleRandom","Math","random","wakeCell","handleDefaults","interval","displayinterval","stdDev","displayStdDev","mutateChance","displaymutateChance","MUTATE_BASE","neighbourMutateChance","displayNeighbourChance","MUTATE_NEIGHBOUR","rgbMutate","displayRGBMutate","hslMutate","displayHSLmutate","hslSpace","polarRandom","meanDeathAge","displaySize","handleIntervalChange","event","intervalVal","target","isNaN","handleStdDevChange","stdDevVal","handleSizeChange","sizeVal","displaysize","handleMutateChange","mutateVal","handleNeighbourMutateChange","neighbourMutateVal","handleDeathChange","deathVal","displayDeathChance","deathChance","handleRGBMutChange","rgbChange","displayRGBmutate","handleHSLMutChange","hslChange","handleDeathAgeChange","handleHSLSpaceSwitch","handlePolarRandomSwitch","this","mutationRoll","killCell","neighbourData","calculateneighbours","neighbourCount","mutateCell","setTimeout","neighbours","neighbourColors","dirs","i","length","dir","y1","x1","push","rowNum","boardT","randn_bmDeath","parentColor","floor","newColor","mutateColor","inputColor","tempHSL","randn_bmPolar","randn_bm","tempRGB","c","skew","u","v","num","sqrt","log","cos","PI","w","meanDeath","min","max","classes","className","map","row","key","cell","j","style","backgroundColor","onClick","toggleCell","Grid","container","spacing","justify","item","FormControl","clsx","margin","textField","button","variant","Button","color","TextField","id","onChange","InputProps","endAdornment","InputAdornment","position","input","handleNieghbourMutatChange","Typography","gutterBottom","radiobuttons","Slider","slider","defaultValue","getAriaValueText","onChangeCommitted","aria-labelledby","step","valueLabelDisplay","FormControlLabel","control","Switch","checked","name","withStyles","theme","borderColor","withoutLabel","marginTop","width","type","verticalAlign","darkTheme","createMuiTheme","palette","App","ThemeProvider","Container","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.58f33287.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Game.css';\r\nimport { Button , Grid } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport clsx from 'clsx';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n// TESTING SUDOKU CELLS\r\nimport './Sudoku.css';\r\n\r\nconst DEFAULT_RGB = [125,125,125];\r\nconst DEFAULT_HSL = [0,0,49];\r\nconst DEFAULT_COLOR = \"rgb(125,125,125)\";\r\n\r\nconst RANDOM_CHANCE = 0.10;\r\nconst DEFAULT_SIZE = 30;\r\nconst DEFAULT_INTERVAL = 250;\r\n\r\nconst DEFAULT_STD_DEV = 25;\r\n\r\nconst MUTATE_BASE = 0.00025;\r\nconst MUTATE_NEIGHBOUR = 0.003;\r\n// const MUTATE_DEATH = 0.00005;\r\n\r\nconst MEAN_DEATH = 100;\r\n\r\nconst DEFAULT_RGB_BIAS = 0.4;\r\nconst DEFAULT_HSL_BIAS= 0.4;\r\n\r\nconst HSL_SPACE = false;\r\nconst POLAR_RAND = true;\r\n\r\nconst styles = (theme) => ({\r\n  margin: {\r\n    '& label.Mui-focused': {\r\n      color: '#61DAFB',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#61DAFB',\r\n        },\r\n    },\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: '14ch',\r\n  },\r\n  button: {\r\n    type: 'dark',\r\n      width: '10ch',\r\n      verticalAlign: '10',\r\n  },\r\n  radiobuttons: {\r\n      color: 'white',\r\n      borderColor: '#61DAFB',\r\n  },\r\n  slider: {\r\n      color: 'red',\r\n      borderColor: '#61DAFB',\r\n  }\r\n});\r\n\r\nconst marks = [\r\n    {\r\n        value: 50,\r\n        label: '50',\r\n    },\r\n    {\r\n        value: 250,\r\n        label: '250',\r\n    },\r\n    {\r\n        value: 450,\r\n        label: '450',\r\n    },\r\n    {\r\n        value: 550,\r\n        label: '∞',\r\n    },\r\n];\r\n  \r\nfunction valuetext(value) {\r\n    return `${value}`;\r\n}\r\n\r\nfunction valueLabelFormat(value) {\r\n    if (value === 550) return '∞';\r\n    else return value;\r\n}\r\n\r\nclass Cell extends React.Component {\r\n\r\n    constructor(xVal, yVal) {\r\n        super();\r\n        this.x = xVal;\r\n        this.y = yVal;\r\n        this.alive = false;\r\n        this.colorDisplay = DEFAULT_COLOR;\r\n        this.colorRGB = DEFAULT_RGB;\r\n        this.colorHSL = DEFAULT_HSL;\r\n        this.deathTime = 0;\r\n        this.age = 0;\r\n        this.data = 0;\r\n    }\r\n    \r\n}\r\n\r\nclass Game extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isRunning: false,\r\n\r\n            interval: DEFAULT_INTERVAL,\r\n            displayinterval: DEFAULT_INTERVAL,\r\n\r\n            size: DEFAULT_SIZE,\r\n            displaysize: DEFAULT_SIZE,\r\n\r\n            stdDev: DEFAULT_STD_DEV,\r\n            displayStdDev: DEFAULT_STD_DEV,\r\n\r\n            mutateChance: MUTATE_BASE,\r\n            displaymutateChance: MUTATE_BASE*100,\r\n\r\n            neighbourMutateChance: MUTATE_NEIGHBOUR,\r\n            displayNeighbourChance: MUTATE_NEIGHBOUR*100,\r\n\r\n            // deathChance: MUTATE_DEATH,\r\n            // displayDeathChance: MUTATE_DEATH*100,\r\n\r\n            rgbMutate: DEFAULT_RGB_BIAS,\r\n            displayRGBMutate: DEFAULT_RGB_BIAS,\r\n\r\n            hslMutate: DEFAULT_HSL_BIAS,\r\n            displayHSLmutate: DEFAULT_HSL_BIAS,\r\n\r\n            hslSpace: HSL_SPACE,\r\n            polarRandom: POLAR_RAND,\r\n\r\n            meanDeathAge: MEAN_DEATH,\r\n\r\n            board: this.makeEmptyBoard(DEFAULT_SIZE),\r\n        }\r\n    }\r\n\r\n    /**\r\n     * SIMULATION HANDLING\r\n     */\r\n    runIteration() {\r\n        const { board, size, mutateChance, meanDeathAge, neighbourMutateChance } = this.state;\r\n        for (let y = 0; y < size; y++) {\r\n            for (let x = 0; x < size; x++) {\r\n                let mutationRoll = Math.random();\r\n                if(board[y][x].alive){ // if alive, age and check death\r\n                    if (meanDeathAge !== 550 && (board[y][x].age > board[y][x].deathTime)){ // 550 = ∞\r\n                        this.killCell(y, x);\r\n                    } else {\r\n                        board[y][x].age++;\r\n                    }\r\n                } else { // if dead, chance to wake and/or mutate\r\n                    // get data about neighbours (numbers and colors)\r\n                    let neighbourData = this.calculateneighbours(x, y);\r\n                    let neighbourCount = neighbourData[0];\r\n                    // neighbours impacts mutation chance\r\n                    if ( mutationRoll <= mutateChance ) {\r\n                        this.wakeCell(y, x);\r\n                    } else if ( mutationRoll <= (mutateChance + (neighbourMutateChance*neighbourCount)) ) {\r\n                        board[0][0].data = board[y][x].alive;\r\n                        board[0][1].data = board[y][x].x+ \" \" +board[y][x].y;\r\n                        this.mutateCell(y, x, neighbourData);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.setState({ board });\r\n\r\n        this.timeoutHandler = window.setTimeout(() => {\r\n            this.runIteration();\r\n        }, this.state.interval);\r\n    }\r\n\r\n    calculateneighbours(x, y) {\r\n        const { board, size, hslSpace} = this.state;\r\n        let neighbours = 0;\r\n        let neighbourColors = [];\r\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\r\n        for (let i = 0; i < dirs.length; i++) {\r\n            const dir = dirs[i];\r\n            let y1 = y + dir[0];\r\n            let x1 = x + dir[1];\r\n            if (x1 >= 0 && x1 < size && y1 >= 0 && y1 < size && board[y1][x1].alive) {\r\n                neighbours++;\r\n                (hslSpace) ? neighbourColors.push([x1,y1,board[y1][x1].colorHSL])\r\n                    : neighbourColors.push([x1,y1,board[y1][x1].colorRGB])\r\n            }\r\n        }\r\n        return [neighbours,neighbourColors];\r\n    }\r\n\r\n    /** \r\n     * INTERNAL METHODS\r\n     */\r\n    makeEmptyBoard(rowNum) {\r\n        let boardT = [];\r\n        for (let y = 0; y < rowNum; y++) {\r\n            boardT[y] = [];\r\n            for (let x = 0; x < rowNum; x++) {\r\n                boardT[y][x] = new Cell(y, x);\r\n            }\r\n        }\r\n        return boardT;\r\n    }\r\n\r\n    toggleCell(y, x) {\r\n\t\tconst { board } = this.state;\r\n        ( board[y][x].alive ? this.killCell(y, x) : this.wakeCell(y, x) )\r\n        this.setState( {board} );\r\n    }\r\n    \r\n    wakeCell(y, x) {\r\n        const { board, meanDeathAge } = this.state;\r\n        board[y][x].alive = true;\r\n        board[y][x].age = 0;\r\n        board[y][x].deathTime = this.randn_bmDeath(meanDeathAge);\r\n        board[y][x].colorDisplay = DEFAULT_COLOR;\r\n        board[y][x].colorRGB = DEFAULT_RGB;\r\n        board[y][x].colorHSL = DEFAULT_HSL;\r\n    }\r\n\r\n    killCell(y, x) {\r\n        const { board } = this.state;\r\n        board[y][x].alive = false;\r\n        board[y][x].age = 0;\r\n    }\r\n\r\n    mutateCell(y, x, neighbourData) {\r\n        const { board, hslSpace, meanDeathAge } = this.state;\r\n        // using color of single, randomly-selected parent\r\n        let selectedParent = neighbourData[1][Math.floor(Math.random()*neighbourData[0])];\r\n        let parentColor = selectedParent[2];\r\n        let newColor = this.mutateColor(parentColor);\r\n        if (hslSpace) { // using HSL color space\r\n            board[y][x].colorHSL = newColor; //not rounded\r\n            board[y][x].colorDisplay = \"hsl(\"+Math.floor(newColor[0])+\",\"+Math.floor(newColor[1])+\"%,\"+Math.floor(newColor[2])+\"%)\";\r\n        } else { // using RGB color space\r\n            board[y][x].colorRGB = newColor; //not rounded\r\n            board[y][x].colorDisplay = \"rgb(\"+Math.floor(newColor[0])+\",\"+Math.floor(newColor[1])+\",\"+Math.floor(newColor[2])+\")\";\r\n        }\r\n        board[y][x].alive = true;\r\n        board[y][x].age = 0;\r\n        board[y][x].deathTime = this.randn_bmDeath(meanDeathAge);\r\n    }\r\n\r\n    mutateColor (inputColor) {\r\n        const { hslSpace, polarRandom, stdDev, hslMutate, rgbMutate} = this.state;\r\n        if ( hslSpace) { // if using HSL color space\r\n            let tempHSL = [0,0,0];\r\n            if (inputColor[0] === 0) {\r\n                tempHSL[0] = Math.floor(Math.random()*Math.floor(360));\r\n            }\r\n            // Seperately handle H, S, L\r\n            if (polarRandom) {\r\n                tempHSL[0] += (inputColor[0] + this.randn_bmPolar(stdDev, 0.5));\r\n                tempHSL[1] += (inputColor[1] + this.randn_bmPolar(stdDev/2, hslMutate));\r\n                tempHSL[2] += (inputColor[2] + this.randn_bmPolar(stdDev/6, 0.5));\r\n            } else {\r\n                tempHSL[0] += (inputColor[0] + this.randn_bm(stdDev, 0.5));\r\n                tempHSL[1] += (inputColor[1] + this.randn_bmPolar(stdDev/2, hslMutate));\r\n                tempHSL[2] += (inputColor[2] + this.randn_bm(stdDev/6, 0.5));\r\n            }\r\n            if (tempHSL[0] > 360) tempHSL[0] = 360;\r\n            else if (tempHSL[0] < 0 ) tempHSL[0] = 0;\r\n            if (tempHSL[1] > 100) tempHSL[1] = 100;\r\n            else if (tempHSL[1] < 0 ) tempHSL[1] = 0;\r\n            if (tempHSL[2] > 100) tempHSL[2] = 100;\r\n            else if (tempHSL[2] < 0 ) tempHSL[2] = 0;\r\n\r\n            return tempHSL;\r\n        } else { // if using RGB color space\r\n            let tempRGB = [0,0,0];\r\n            for (let c = 0; c < 3; c++) {\r\n                if (polarRandom) {\r\n                    tempRGB[c] = (inputColor[c] + this.randn_bmPolar(stdDev, rgbMutate));\r\n                } else {\r\n                    tempRGB[c] = (inputColor[c] + this.randn_bm(stdDev, rgbMutate));\r\n                }\r\n                if (tempRGB[c] > 255) tempRGB[c] = 255;\r\n                else if (tempRGB[c] < 0 ) tempRGB[c] = 0;\r\n            }\r\n            return tempRGB;\r\n        }\r\n    }\r\n\r\n    randn_bm(stdDev, skew) {\r\n        let u = 0, v = 0;\r\n        while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n        while(v === 0) v = Math.random();\r\n        let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\r\n    \r\n        num = num / 10.0 + 0.5; // Translate to 0 -> 1\r\n        if (num > 1 || num < 0) num = this.randn_bm(); // resample between 0 and 1 if out of range\r\n        num -= skew;\r\n        num *= (10 * stdDev); // Stretch to fill range\r\n        return num;\r\n    }\r\n\r\n    randn_bmPolar(stdDev, skew) { // ALTERNATE RANDOM FOR TESTING\r\n        let u = 0, v = 0, w = 1;\r\n        while(w >= 1) {\r\n          u = 2 * Math.random() - 1;\r\n          v = 2 * Math.random() - 1;\r\n          w = u*u + v*v;\r\n        }\r\n        w = Math.sqrt( -2.0 * Math.log( w ) / w);\r\n        let output = (u * w) * stdDev;\r\n        return (output - stdDev*skew);\r\n      }\r\n\r\n    randn_bmDeath(meanDeath) {\r\n        let min = meanDeath * 0.5;\r\n        let max = meanDeath * 1.5;\r\n        let u = 0, v = 0;\r\n        while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n        while(v === 0) v = Math.random();\r\n        let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\r\n    \r\n        num = num / 10.0 + 0.5; // Translate to 0 -> 1\r\n        if (num > 1 || num < 0) num = this.randn_bmDeath(meanDeath); // resample between 0 and 1 if out of range\r\n        num *= max - min; // Stretch to fill range\r\n        num += min; // offset to min\r\n        return num;\r\n    }\r\n\r\n    /**\r\n     * BUTTON CLICK HANDLING\r\n     */\r\n    runGame = () => {\r\n        this.setState({ isRunning: true });\r\n        this.runIteration();\r\n    }\r\n\r\n    stopGame = () => {\r\n        this.setState({ isRunning: false });\r\n        if (this.timeoutHandler) {\r\n            window.clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = null;\r\n        }\r\n    }\r\n\r\n    handleClear = () => {\r\n        const { size } = this.state;\r\n        this.stopGame();\r\n        let newBoard = this.makeEmptyBoard(size);\r\n        this.setState({ board: newBoard });\r\n    }\r\n\r\n    handleRandom = () => {\r\n        const { board, size } = this.state;\r\n        for (let y = 0; y < size; y++) {\r\n            for (let x = 0; x < size; x++) {\r\n                (Math.random() <= RANDOM_CHANCE) && (this.wakeCell(y, x));\r\n            }\r\n        }\r\n        this.setState({ board });\r\n    }\r\n\r\n    handleDefaults = () => {\r\n        this.setState({\r\n            interval: DEFAULT_INTERVAL,\r\n            displayinterval: DEFAULT_INTERVAL,\r\n\r\n            stdDev: DEFAULT_STD_DEV,\r\n            displayStdDev: DEFAULT_STD_DEV,\r\n\r\n            mutateChance: MUTATE_BASE,\r\n            displaymutateChance: MUTATE_BASE*100,\r\n\r\n            neighbourMutateChance: MUTATE_NEIGHBOUR,\r\n            displayNeighbourChance: MUTATE_NEIGHBOUR*100,\r\n\r\n            // deathChance: MUTATE_DEATH,\r\n            // displayDeathChance: MUTATE_DEATH*100,\r\n\r\n            rgbMutate: DEFAULT_RGB_BIAS,\r\n            displayRGBMutate: DEFAULT_RGB_BIAS,\r\n\r\n            hslMutate: DEFAULT_HSL_BIAS,\r\n            displayHSLmutate: DEFAULT_HSL_BIAS,\r\n\r\n            hslSpace: HSL_SPACE,\r\n            polarRandom: POLAR_RAND,\r\n            meanDeathAge: MEAN_DEATH,\r\n            \r\n         });\r\n\r\n         this.stopGame();\r\n\r\n         // only reset board if size changes\r\n         if (this.state.size !== DEFAULT_SIZE) {\r\n            this.setState({\r\n                size: DEFAULT_SIZE,\r\n                displaySize: DEFAULT_SIZE,\r\n            });\r\n            let newBoard = this.makeEmptyBoard(DEFAULT_SIZE);\r\n            this.setState({ board: newBoard });    \r\n         }\r\n    }\r\n\r\n    /**\r\n     * TEXT FIELD CHANGE HANDLING\r\n     */\r\n    handleIntervalChange = (event) => {\r\n        let intervalVal = event.target.value;\r\n        this.setState({ displayinterval: intervalVal });\r\n        if(intervalVal >= 20 && !isNaN(intervalVal)) {\r\n            this.stopGame();\r\n            this.setState({ interval: intervalVal });\r\n        }\r\n    }\r\n\r\n    handleStdDevChange = (event) => {\r\n        let stdDevVal = event.target.value;\r\n        this.setState({ displayStdDev: stdDevVal });\r\n        if(stdDevVal >= 0 && !isNaN(stdDevVal)) {\r\n            this.stopGame();\r\n            this.setState({ stdDev: stdDevVal });\r\n        }\r\n    }\r\n\r\n    handleSizeChange = (event) => {\r\n        let sizeVal = event.target.value;\r\n        this.setState({ displaysize: sizeVal });\r\n        if(sizeVal >= 4 && sizeVal < 100 && !isNaN(sizeVal)) {\r\n            this.stopGame();\r\n            this.setState({ size: sizeVal, board: this.makeEmptyBoard(sizeVal) });\r\n        }\r\n    }\r\n\r\n    handleMutateChange = (event) => {\r\n        let mutateVal = event.target.value;\r\n        this.setState({ displaymutateChance: mutateVal });\r\n        if(mutateVal >= 0 && mutateVal <= 100 && !isNaN(mutateVal)) {\r\n            this.stopGame();\r\n            this.setState({ mutateChance: mutateVal/100 });\r\n        }\r\n    }\r\n\r\n    handleNeighbourMutateChange = (event) => {\r\n        let neighbourMutateVal = event.target.value;\r\n        this.setState({ displayNeighbourChance: neighbourMutateVal });\r\n        if(neighbourMutateVal >= 0 && neighbourMutateVal <= 100 && !isNaN(neighbourMutateVal)) {\r\n            this.stopGame();\r\n            this.setState({ neighbourMutateChance: neighbourMutateVal/100 });\r\n        }\r\n    }\r\n\r\n    handleDeathChange = (event) => {\r\n        let deathVal = event.target.value;\r\n        this.setState({ displayDeathChance: deathVal });\r\n        if(deathVal >= 0 && deathVal <= 100 && !isNaN(deathVal)) {\r\n            this.stopGame();\r\n            this.setState({ deathChance: deathVal/100 });\r\n        }\r\n    }\r\n\r\n    handleRGBMutChange = (event) => {\r\n        let rgbChange = event.target.value;\r\n        this.setState({ displayRGBmutate: rgbChange });\r\n        if(rgbChange >= 0 && rgbChange <= 1 && !isNaN(rgbChange)) {\r\n            this.stopGame();\r\n            this.setState({ rgbMutate: rgbChange });\r\n        }\r\n    }\r\n\r\n    handleHSLMutChange = (event) => {\r\n        let hslChange = event.target.value;\r\n        this.setState({ displayHSLmutate: hslChange });\r\n        if(hslChange >= 0 && hslChange <= 1 && !isNaN(hslChange)) {\r\n            this.stopGame();\r\n            this.setState({ hslMutate: hslChange });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * SWITCH CHANGE HANDLING\r\n     */\r\n    handleDeathAgeChange = (event, value) => {\r\n        this.setState({ meanDeathAge: value });\r\n    }\r\n\r\n    handleHSLSpaceSwitch = () => {\r\n        const { hslSpace } = this.state;\r\n        hslSpace ? this.setState({ hslSpace: false }) : this.setState({ hslSpace: true });\r\n        this.handleClear();\r\n    }\r\n\r\n    handlePolarRandomSwitch = () => {\r\n        const { polarRandom } = this.state;\r\n        polarRandom ? this.setState({ polarRandom: false }) : this.setState({ polarRandom: true });\r\n    }\r\n\r\n    /** \r\n     * RENDERING GAME\r\n     */\r\n    render() {\r\n        const { classes } = this.props;\r\n        const {\r\n            isRunning,\r\n            board,\r\n            displayinterval,\r\n            displayStdDev,\r\n            displaysize,\r\n            displaymutateChance,\r\n            displayNeighbourChance,\r\n            // displayDeathChance,\r\n            displayRGBMutate,\r\n            displayHSLmutate,\r\n            hslSpace,\r\n            polarRandom,\r\n            meanDeathAge,\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className=\"GameDiv\">\r\n                <div className=\"sudoku-board\">\r\n                    {board.map((row, i) => (\r\n                        <div className=\"sudoku-row\" key={`row,${i}`} >\r\n                            {\r\n                            row.map((cell, j) => (\r\n                                <div key={`${cell.x},${cell.y}`}>\r\n                                {board[i][j].alive ? (i===0\r\n                                    ? (j===0\r\n                                        ? <div \r\n                                        className={\"sudoku-cell sudoku-cell-u sudoku-cell-l c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: board[i][j].colorDisplay}}\r\n                                        onClick={() => this.toggleCell(i, j)}/>\r\n                                        : <div \r\n                                        className={\"sudoku-cell sudoku-cell-u c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: board[i][j].colorDisplay}}\r\n                                        onClick={() => this.toggleCell(i, j)}/>\r\n                                    )\r\n                                    : (j===0\r\n                                        ? <div \r\n                                        className={\"sudoku-cell sudoku-cell-l c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: board[i][j].colorDisplay}}\r\n                                        onClick={() => this.toggleCell(i, j)}/>\r\n                                        : <div \r\n                                        className={\"sudoku-cell c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: board[i][j].colorDisplay}}\r\n                                        onClick={() => this.toggleCell(i, j)}/>\r\n                                    )\r\n                                )\r\n                                : (i===0\r\n                                    ? (j===0\r\n                                        ? <div \r\n                                        className={\"sudoku-cell sudoku-cell-u sudoku-cell-l c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: \"#000000\"}}\r\n                                        onClick={() => this.toggleCell(i,j)}/>\r\n                                        : <div \r\n                                        className={\"sudoku-cell sudoku-cell-u c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: \"#000000\"}}\r\n                                        onClick={() => this.toggleCell(i,j)}/>\r\n                                    )\r\n                                    : (j===0\r\n                                        ? <div \r\n                                        className={\"sudoku-cell sudoku-cell-l c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: \"#000000\"}}\r\n                                        onClick={() => this.toggleCell(i,j)}/>\r\n                                        : <div \r\n                                        className={\"sudoku-cell c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: \"#000000\"}}\r\n                                        onClick={() => this.toggleCell(i,j)}/>\r\n                                    )\r\n                                )\r\n                                    \r\n                                }\r\n                                </div>\r\n                            ))\r\n                            }\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"ControlsContainer\" >\r\n                    <Grid className=\"Controls1\" container spacing={1} justify=\"center\">\r\n                        <Grid item>\r\n                            <FormControl className={clsx(classes.margin, classes.textField, classes.button)} variant=\"outlined\">\r\n                                {isRunning ?\r\n                                    <Button size=\"large\" color=\"secondary\" variant=\"contained\" className=\"button\" onClick={this.stopGame}><StopIcon/>Stop</Button> :\r\n                                    <Button size=\"large\" color=\"primary\" variant=\"contained\" className=\"button\" onClick={this.runGame}><PlayArrowIcon/>Run</Button>\r\n                                }\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControl className={clsx(classes.margin, classes.textField, classes.button)} variant=\"outlined\">\r\n                                <Button size=\"large\" variant=\"contained\" className=\"button\" onClick={this.handleRandom}>Random</Button>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControl className={clsx(classes.margin, classes.textField, classes.button)} variant=\"outlined\">\r\n                                <Button size=\"large\" variant=\"contained\" className=\"button\" onClick={this.handleClear}>Clear</Button>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControl className={clsx(classes.margin, classes.textField, classes.button)} variant=\"outlined\">\r\n                                <Button size=\"large\" variant=\"contained\" className=\"button\" onClick={this.handleDefaults}>Defaults</Button>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid>\r\n                        <Grid className=\"Controls2\" container spacing={1} justify=\"center\">\r\n                            <Grid item>\r\n                                <TextField\r\n                                    label=\"Interval speed [20,∞]\"\r\n                                    id=\"outlined-adornment-interval\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleIntervalChange}\r\n                                    value={displayinterval}\r\n                                    InputProps={{\r\n                                    endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    className: classes.input\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField \r\n                                    label=\"Colour Deviation [0,∞]\"\r\n                                    id=\"outlined-adornment-stdDevColor\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleStdDevChange}\r\n                                    value={displayStdDev}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField\r\n                                    label=\"Board size [4,100]\"\r\n                                    id=\"outlined-adornment-size\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleSizeChange}\r\n                                    value={displaysize}\r\n                                    InputProps={{\r\n                                    endAdornment: <InputAdornment position=\"end\">cells</InputAdornment>,\r\n                                    className: classes.input\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                            <TextField\r\n                                    label=\"RGB Col. Bias [0,1]\"\r\n                                    id=\"outlined-adornment-size\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleRGBMutChange}\r\n                                    value={displayRGBMutate}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid className=\"Controls2\" container spacing={1} justify=\"center\">\r\n                        <Grid item >\r\n                                <TextField \r\n                                    label=\"Mutate % [0,100]\"\r\n                                    id=\"outlined-adornment-mutationChance\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleMutateChange}\r\n                                    value={displaymutateChance}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField \r\n                                    label=\"Neighbour + % [0,100]\"\r\n                                    id=\"outlined-adornment-neighbourMutationChance\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleNieghbourMutatChange}\r\n                                    value={displayNeighbourChance}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            {/* <Grid item>\r\n                                <TextField \r\n                                    label=\"Death % [0,100]\"\r\n                                    id=\"outlined-adornment-deathChance\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleDeathChange}\r\n                                    value={displayDeathChance}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid> */}\r\n                            <Grid item>\r\n                                <TextField\r\n                                    label=\"HSL Sat+ Bias [0,1]\"\r\n                                    id=\"outlined-adornment-size\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleHSLMutChange}\r\n                                    value={displayHSLmutate}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid className=\"Controls3\" container spacing={1} justify=\"center\">\r\n                            <Grid>\r\n                                <Typography id=\"discrete-slider\" gutterBottom className={clsx(classes.radiobuttons)}>\r\n                                    Mean Death Age\r\n                                </Typography>\r\n                                <Slider\r\n                                    className={clsx(classes.slider)}\r\n                                    defaultValue={meanDeathAge}\r\n                                    valueLabelFormat={valueLabelFormat}\r\n                                    getAriaValueText={valuetext}\r\n                                    onChangeCommitted={this.handleDeathAgeChange}\r\n                                    aria-labelledby=\"discrete-slider-custom\"\r\n                                    step={50}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    marks={marks}\r\n                                    min={50}\r\n                                    max={550}\r\n                                />\r\n                            </Grid>\r\n                            <FormControlLabel\r\n                                control={<Switch checked={hslSpace} onChange={this.handleHSLSpaceSwitch}\r\n                                name=\"HSLSpaceSwitch\" />}\r\n                                label=\"HSL Space\"\r\n                                className={clsx(classes.margin, classes.textField, classes.radiobuttons)}\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch checked={polarRandom} onChange={this.handlePolarRandomSwitch}\r\n                                name=\"polarRandomSwitch\" />}\r\n                                label=\"Polar Random\"\r\n                                className={clsx(classes.margin, classes.textField, classes.radiobuttons)}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Game);\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//import Menu from './Menu';\nimport Game from './Game';\nimport { Container } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <div className=\"App\">\n        <Container className=\"FullPage\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1>RZevol in React</h1>\n          </header>\n          <Game/>\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}