{"version":3,"sources":["logo.svg","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_RGB","DEFAULT_HSL","Cell","xVal","yVal","hslSpace","x","y","alive","colorDisplay","colorRGB","colorHSL","data","React","Component","Game","props","runGame","setState","isRunning","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleClear","size","state","newBoard","makeEmptyBoard","board","handleRandom","Math","random","wakeCell","handleDefaults","interval","displayinterval","stdDev","displayStdDev","mutateChance","displaymutateChance","MUTATE_BASE","neighbourMutateChance","displayNeighbourChance","MUTATE_NEIGHBOUR","deathChance","displayDeathChance","MUTATE_DEATH","combinedMutate","polarRandom","displaySize","handleIntervalChange","event","intervalVal","target","value","isNaN","handleStdDevChange","stdDevVal","handleSizeChange","sizeVal","displaysize","handleMutateChange","mutateVal","handleNeighbourMutateChange","neighbourMutateVal","handleDeathChange","deathVal","deatheChance","handleRGBMutChange","rgbChange","displayRGBmutate","rgbMutate","handleHSLMutChange","hslChange","displayHSLmutate","hslMutate","handleMutateSwitch","handleHSLSpaceSwitch","handlePolarRandomSwitch","displayRGBMutate","this","mutationRoll","killCell","neighbourData","calculateneighbours","neighbourCount","mutateCell","setTimeout","neighbours","neighbourColors","dirs","i","length","dir","y1","x1","push","rowNum","boardT","parentColor","floor","newColor","mutateColor","inputColor","tempHSL","randn_bmPolar","randn_bm","tempRGB","c","skew","u","v","num","sqrt","log","cos","PI","w","classes","className","map","row","key","cell","j","style","backgroundColor","onClick","toggleCell","Grid","container","spacing","justify","item","FormControl","clsx","margin","textField","button","variant","Button","color","TextField","label","id","onChange","InputProps","endAdornment","InputAdornment","position","input","handleNieghbourMutatChange","FormGroup","FormControlLabel","control","Switch","checked","name","radiobuttons","withStyles","theme","borderColor","withoutLabel","marginTop","width","type","verticalAlign","darkTheme","createMuiTheme","palette","App","ThemeProvider","Container","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da9716c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Game.css';\r\nimport { Button , Grid } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport clsx from 'clsx';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\n\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n// TESTING SUDOKU CELLS\r\nimport './Sudoku.css';\r\n\r\nconst DEFAULT_RGB = [125,125,125];\r\nconst DEFAULT_HSL = [0,0,49];\r\nconst DEFAULT_COLOR = \"rgb(125,125,125)\";\r\n\r\nconst RANDOM_CHANCE = 0.10;\r\nconst DEFAULT_SIZE = 30;\r\nconst DEFAULT_INTERVAL = 150;\r\n\r\nconst DEFAULT_STD_DEV = 25;\r\n\r\nconst MUTATE_BASE = 0.00025;\r\nconst MUTATE_NEIGHBOUR = 0.003;\r\nconst MUTATE_DEATH = 0.00005;\r\n\r\nconst DEFAULT_RGB_BIAS = 0.4;\r\nconst DEFAULT_HSL_BIAS= 0.4;\r\n\r\nconst COMBINED_MUTATE = false;\r\nconst HSL_SPACE = false;\r\nconst POLAR_RAND = true;\r\n\r\nconst styles = (theme) => ({\r\n  margin: {\r\n    '& label.Mui-focused': {\r\n      color: '#61DAFB',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#61DAFB',\r\n        },\r\n    },\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: '14ch',\r\n  },\r\n  button: {\r\n    type: 'dark',\r\n      width: '10ch',\r\n      verticalAlign: '10',\r\n  },\r\n  radiobuttons: {\r\n      color: 'white',\r\n      borderColor: '#61DAFB',\r\n  }\r\n});\r\n\r\nclass Cell extends React.Component {\r\n\r\n    constructor(xVal, yVal, hslSpace) {\r\n        super();\r\n        this.x = xVal;\r\n        this.y = yVal;\r\n        this.alive = false;\r\n        this.colorDisplay = DEFAULT_COLOR;\r\n        this.colorRGB = DEFAULT_RGB;\r\n        this.colorHSL = DEFAULT_HSL;\r\n        this.data = 0;\r\n    }\r\n    \r\n}\r\n\r\nclass Game extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isRunning: false,\r\n\r\n            interval: DEFAULT_INTERVAL,\r\n            displayinterval: DEFAULT_INTERVAL,\r\n\r\n            size: DEFAULT_SIZE,\r\n            displaysize: DEFAULT_SIZE,\r\n\r\n            stdDev: DEFAULT_STD_DEV,\r\n            displayStdDev: DEFAULT_STD_DEV,\r\n\r\n            mutateChance: MUTATE_BASE,\r\n            displaymutateChance: MUTATE_BASE*100,\r\n\r\n            neighbourMutateChance: MUTATE_NEIGHBOUR,\r\n            displayNeighbourChance: MUTATE_NEIGHBOUR*100,\r\n\r\n            deathChance: MUTATE_DEATH,\r\n            displayDeathChance: MUTATE_DEATH*100,\r\n\r\n            rgbMutate: DEFAULT_RGB_BIAS,\r\n            displayRGBMutate: DEFAULT_RGB_BIAS,\r\n\r\n            hslMutate: DEFAULT_HSL_BIAS,\r\n            displayHSLmutate: DEFAULT_HSL_BIAS,\r\n\r\n            combinedMutate: COMBINED_MUTATE,\r\n            hslSpace: HSL_SPACE,\r\n            polarRandom: POLAR_RAND,\r\n\r\n            board: this.makeEmptyBoard(DEFAULT_SIZE),\r\n        }\r\n    }\r\n\r\n    /**\r\n     * SIMULATION HANDLING\r\n     */\r\n    runIteration() {\r\n        const { board, size, mutateChance, deathChance, neighbourMutateChance } = this.state;\r\n\r\n        for (let y = 0; y < size; y++) {\r\n            for (let x = 0; x < size; x++) {\r\n                let mutationRoll = Math.random();\r\n                if(board[y][x].alive){ // if alive, chance to die\r\n                    if ( mutationRoll <= ( deathChance * 0.5 ) ) {\r\n                        this.killCell(y, x);\r\n                    }\r\n                } else { // if dead, chance to wake and/or mutate\r\n                    // get data about neighbours (numbers and colors)\r\n                    let neighbourData = this.calculateneighbours(x, y);\r\n                    let neighbourCount = neighbourData[0];\r\n\r\n                    // neighbours impacts mutation chance\r\n                    if ( mutationRoll <= mutateChance ) {\r\n                        this.wakeCell(x, y);\r\n                    } else if ( mutationRoll <= (mutateChance + (neighbourMutateChance*neighbourCount)) ) {\r\n                        this.mutateCell(x, y, neighbourData);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // this.handleRandom();\r\n        this.setState({ board });\r\n\r\n        this.timeoutHandler = window.setTimeout(() => {\r\n            this.runIteration();\r\n        }, this.state.interval);\r\n    }\r\n\r\n    calculateneighbours(x, y) {\r\n        const { board, size, hslSpace} = this.state;\r\n        let neighbours = 0;\r\n        let neighbourColors = [];\r\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\r\n        for (let i = 0; i < dirs.length; i++) {\r\n            const dir = dirs[i];\r\n            let y1 = y + dir[0];\r\n            let x1 = x + dir[1];\r\n            if (x1 >= 0 && x1 < size && y1 >= 0 && y1 < size && board[y1][x1].alive) {\r\n                neighbours++;\r\n                (hslSpace) ? neighbourColors.push([x1,y1,board[y1][x1].colorHSL])\r\n                    : neighbourColors.push([x1,y1,board[y1][x1].colorRGB])\r\n            }\r\n        }\r\n\r\n        return [neighbours,neighbourColors];\r\n    }\r\n\r\n    /** \r\n     * INTERNAL METHODS\r\n     */\r\n    makeEmptyBoard(rowNum) {\r\n        let boardT = [];\r\n        for (let y = 0; y < rowNum; y++) {\r\n            boardT[y] = [];\r\n            for (let x = 0; x < rowNum; x++) {\r\n                boardT[y][x] = new Cell(y, x);\r\n            }\r\n        }\r\n        return boardT;\r\n    }\r\n\r\n    toggleCell(y, x) {\r\n\t\tconst { board } = this.state;\r\n        ( board[y][x].alive ? this.killCell(y, x) : this.wakeCell(y, x) )\r\n        this.setState( {board} );\r\n    }\r\n    \r\n    wakeCell(y,x) {\r\n        const { board } = this.state;\r\n        board[y][x].alive = true;\r\n        board[y][x].colorDisplay = DEFAULT_COLOR;\r\n        board[y][x].colorRGB = DEFAULT_RGB;\r\n        board[y][x].colorHSL = DEFAULT_HSL;\r\n        this.setState( {board} );\r\n    }\r\n\r\n    killCell(y,x) {\r\n        const { board } = this.state;\r\n        board[y][x].alive = false;\r\n        this.setState( {board} );\r\n    }\r\n\r\n    mutateCell(x, y, neighbourData) {\r\n        const { board, combinedMutate, hslSpace } = this.state;\r\n        if ( combinedMutate ){ // if using combination of parent color\r\n            // CURRENTLY INACTIVE\r\n            return DEFAULT_COLOR;\r\n        } else { // if using color of single, randomly-selected parent\r\n            let selectedParent = neighbourData[1][Math.floor(Math.random()*neighbourData[0])];\r\n            let parentColor = selectedParent[2];\r\n            let newColor = this.mutateColor(parentColor);\r\n            if (hslSpace) { // using HSL color space\r\n                board[y][x].colorHSL = newColor; //not rounded\r\n                board[y][x].colorDisplay = \"hsl(\"+Math.floor(newColor[0])+\",\"+Math.floor(newColor[1])+\"%,\"+Math.floor(newColor[2])+\"%)\";\r\n            } else { // using RGB color space\r\n                board[y][x].colorRGB = newColor; //not rounded\r\n                board[y][x].colorDisplay = \"rgb(\"+Math.floor(newColor[0])+\",\"+Math.floor(newColor[1])+\",\"+Math.floor(newColor[2])+\")\";\r\n            }\r\n            board[y][x].alive = true;\r\n        }\r\n    }\r\n\r\n    mutateColor (inputColor) {\r\n        const { hslSpace, polarRandom, stdDev, hslMutate, rgbMutate} = this.state;\r\n        if ( hslSpace) { // if using HSL color space\r\n            let tempHSL = [0,0,0];\r\n            if (inputColor[0] === 0) {\r\n                tempHSL[0] = Math.floor(Math.random()*Math.floor(360));\r\n            }\r\n            // Seperately handle H, S, L\r\n            if (polarRandom) {\r\n                tempHSL[0] += (inputColor[0] + this.randn_bmPolar(stdDev, 0.5));\r\n                tempHSL[1] += (inputColor[1] + this.randn_bmPolar(stdDev/2, hslMutate));\r\n                tempHSL[2] += (inputColor[2] + this.randn_bmPolar(stdDev/6, 0.5));\r\n            } else {\r\n                tempHSL[0] += (inputColor[0] + this.randn_bm(stdDev, 0.5));\r\n                tempHSL[1] += (inputColor[1] + this.randn_bmPolar(stdDev/2, hslMutate));\r\n                tempHSL[2] += (inputColor[2] + this.randn_bm(stdDev/6, 0.5));\r\n            }\r\n            if (tempHSL[0] > 360) tempHSL[0] = 360;\r\n            else if (tempHSL[0] < 0 ) tempHSL[0] = 0;\r\n            if (tempHSL[1] > 100) tempHSL[1] = 100;\r\n            else if (tempHSL[1] < 0 ) tempHSL[1] = 0;\r\n            if (tempHSL[2] > 100) tempHSL[2] = 100;\r\n            else if (tempHSL[2] < 0 ) tempHSL[2] = 0;\r\n\r\n            return tempHSL;\r\n        } else { // if using RGB color space\r\n            let tempRGB = [0,0,0];\r\n            for (let c = 0; c < 3; c++) {\r\n                if (polarRandom) {\r\n                    tempRGB[c] = (inputColor[c] + this.randn_bmPolar(stdDev, rgbMutate));\r\n                } else {\r\n                    tempRGB[c] = (inputColor[c] + this.randn_bm(stdDev, rgbMutate));\r\n                }\r\n                if (tempRGB[c] > 255) tempRGB[c] = 255;\r\n                else if (tempRGB[c] < 0 ) tempRGB[c] = 0;\r\n            }\r\n            return tempRGB;\r\n        }\r\n    }\r\n\r\n    randn_bm(stdDev, skew) {\r\n        let u = 0, v = 0;\r\n        while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n        while(v === 0) v = Math.random();\r\n        let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\r\n    \r\n        num = num / 10.0 + 0.5; // Translate to 0 -> 1\r\n        if (num > 1 || num < 0) num = this.randn_bm(); // resample between 0 and 1 if out of range\r\n        num -= skew;\r\n        num *= (10 * stdDev); // Stretch to fill range\r\n        return num;\r\n    }\r\n\r\n    randn_bmPolar(stdDev, skew) { // ALTERNATE RANDOM FOR TESTING\r\n        let u = 0, v = 0, w = 1;\r\n        while(w >= 1) {\r\n          u = 2 * Math.random() - 1;\r\n          v = 2 * Math.random() - 1;\r\n          w = u*u + v*v;\r\n        }\r\n        w = Math.sqrt( -2.0 * Math.log( w ) / w);\r\n        let output = (u * w) * stdDev;\r\n        return (output - stdDev*skew);\r\n      }\r\n\r\n    /**\r\n     * BUTTON CLICK HANDLING\r\n     */\r\n    runGame = () => {\r\n        this.setState({ isRunning: true });\r\n        this.runIteration();\r\n    }\r\n\r\n    stopGame = () => {\r\n        this.setState({ isRunning: false });\r\n        if (this.timeoutHandler) {\r\n            window.clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = null;\r\n        }\r\n    }\r\n\r\n    handleClear = () => {\r\n        const { size } = this.state;\r\n        this.stopGame();\r\n        let newBoard = this.makeEmptyBoard(size);\r\n        this.setState({ board: newBoard });\r\n    }\r\n\r\n    handleRandom = () => {\r\n        const { board, size } = this.state;\r\n        for (let y = 0; y < size; y++) {\r\n            for (let x = 0; x < size; x++) {\r\n                (Math.random() <= RANDOM_CHANCE) && (this.wakeCell(y, x));\r\n            }\r\n        }\r\n        this.setState({ board });\r\n    }\r\n\r\n    handleDefaults = () => {\r\n        this.setState({\r\n            interval: DEFAULT_INTERVAL,\r\n            displayinterval: DEFAULT_INTERVAL,\r\n\r\n            stdDev: DEFAULT_STD_DEV,\r\n            displayStdDev: DEFAULT_STD_DEV,\r\n\r\n            mutateChance: MUTATE_BASE,\r\n            displaymutateChance: MUTATE_BASE*100,\r\n\r\n            neighbourMutateChance: MUTATE_NEIGHBOUR,\r\n            displayNeighbourChance: MUTATE_NEIGHBOUR*100,\r\n\r\n            deathChance: MUTATE_DEATH,\r\n            displayDeathChance: MUTATE_DEATH*100,\r\n\r\n            combinedMutate: COMBINED_MUTATE,\r\n            hslSpace: HSL_SPACE,\r\n            polarRandom: POLAR_RAND,\r\n            \r\n         });\r\n\r\n         this.stopGame();\r\n\r\n         // only reset board if size changes\r\n         if (this.state.size !== DEFAULT_SIZE) {\r\n            this.setState({\r\n                size: DEFAULT_SIZE,\r\n                displaySize: DEFAULT_SIZE,\r\n            });\r\n            let newBoard = this.makeEmptyBoard(DEFAULT_SIZE);\r\n            this.setState({ board: newBoard });    \r\n         }\r\n    }\r\n\r\n    /**\r\n     * TEXT FIELD CHANGE HANDLING\r\n     */\r\n    handleIntervalChange = (event) => {\r\n        let intervalVal = event.target.value;\r\n        this.setState({ displayinterval: intervalVal });\r\n        if(intervalVal >= 20 && !isNaN(intervalVal)) {\r\n            this.stopGame();\r\n            this.setState({ interval: intervalVal });\r\n        }\r\n    }\r\n\r\n    handleStdDevChange = (event) => {\r\n        let stdDevVal = event.target.value;\r\n        this.setState({ displayStdDev: stdDevVal });\r\n        if(stdDevVal >= 0 && !isNaN(stdDevVal)) {\r\n            this.stopGame();\r\n            this.setState({ stdDev: stdDevVal });\r\n        }\r\n    }\r\n\r\n    handleSizeChange = (event) => {\r\n        let sizeVal = event.target.value;\r\n        this.setState({ displaysize: sizeVal });\r\n        if(sizeVal >= 4 && sizeVal < 100 && !isNaN(sizeVal)) {\r\n            this.stopGame();\r\n            this.setState({ size: sizeVal, board: this.makeEmptyBoard(sizeVal) });\r\n        }\r\n    }\r\n\r\n    handleMutateChange = (event) => {\r\n        let mutateVal = event.target.value;\r\n        this.setState({ displaymutateChance: mutateVal });\r\n        if(mutateVal >= 0 && mutateVal <= 100 && !isNaN(mutateVal)) {\r\n            this.stopGame();\r\n            this.setState({ mutateChance: mutateVal/100 });\r\n        }\r\n    }\r\n\r\n    handleNeighbourMutateChange = (event) => {\r\n        let neighbourMutateVal = event.target.value;\r\n        this.setState({ displayNeighbourChance: neighbourMutateVal });\r\n        if(neighbourMutateVal >= 0 && neighbourMutateVal <= 100 && !isNaN(neighbourMutateVal)) {\r\n            this.stopGame();\r\n            this.setState({ neighbourMutateChance: neighbourMutateVal/100 });\r\n        }\r\n    }\r\n\r\n    handleDeathChange = (event) => {\r\n        let deathVal = event.target.value;\r\n        this.setState({ displayDeathChance: deathVal });\r\n        if(deathVal >= 0 && deathVal <= 100 && !isNaN(deathVal)) {\r\n            this.stopGame();\r\n            this.setState({ deatheChance: deathVal/100 });\r\n        }\r\n    }\r\n\r\n    handleRGBMutChange = (event) => {\r\n        let rgbChange = event.target.value;\r\n        this.setState({ displayRGBmutate: rgbChange });\r\n        if(rgbChange >= 0 && rgbChange <= 1 && !isNaN(rgbChange)) {\r\n            this.stopGame();\r\n            this.setState({ rgbMutate: rgbChange });\r\n        }\r\n    }\r\n\r\n    handleHSLMutChange = (event) => {\r\n        let hslChange = event.target.value;\r\n        this.setState({ displayHSLmutate: hslChange });\r\n        if(hslChange >= 0 && hslChange <= 1 && !isNaN(hslChange)) {\r\n            this.stopGame();\r\n            this.setState({ hslMutate: hslChange });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * SWITCH CHANGE HANDLING\r\n     */\r\n    handleMutateSwitch = () => {\r\n        return 0;\r\n    }\r\n    \r\n    handleHSLSpaceSwitch = () => {\r\n        const { hslSpace } = this.state;\r\n        if (hslSpace) { // convert to RGB\r\n            this.setState({ hslSpace: false });\r\n            this.handleClear();\r\n        } else { // convert to HSL\r\n            this.setState({ hslSpace: true });\r\n            this.handleClear();\r\n        }\r\n    }\r\n\r\n    handlePolarRandomSwitch = () => {\r\n        const { polarRandom } = this.state;\r\n        polarRandom ? this.setState({ polarRandom: false }) : this.setState({ polarRandom: true });\r\n    }\r\n\r\n    /** \r\n     * RENDERING GAME\r\n     */\r\n    render() {\r\n        const { classes } = this.props;\r\n        const {\r\n            isRunning,\r\n            board,\r\n            displayinterval,\r\n            displayStdDev,\r\n            displaysize,\r\n            displaymutateChance,\r\n            displayNeighbourChance,\r\n            displayDeathChance,\r\n            displayRGBMutate,\r\n            displayHSLmutate,\r\n            combinedMutate,\r\n            hslSpace,\r\n            polarRandom,\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className=\"GameDiv\">\r\n                <div className=\"sudoku-board\">\r\n                    {board.map((row, i) => (\r\n                        <div className=\"sudoku-row\" key={`row,${i}`} >\r\n                            {\r\n                            row.map((cell, j) => (\r\n                                <div key={`${cell.x},${cell.y}`}>\r\n                                {board[i][j].alive ? (i===0\r\n                                    ? (j===0\r\n                                        ? <div \r\n                                        className={\"sudoku-cell sudoku-cell-u sudoku-cell-l c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: board[i][j].colorDisplay}}\r\n                                        onClick={() => this.toggleCell(i, j)}/>\r\n                                        : <div \r\n                                        className={\"sudoku-cell sudoku-cell-u c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: board[i][j].colorDisplay}}\r\n                                        onClick={() => this.toggleCell(i, j)}/>\r\n                                    )\r\n                                    : (j===0\r\n                                        ? <div \r\n                                        className={\"sudoku-cell sudoku-cell-l c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: board[i][j].colorDisplay}}\r\n                                        onClick={() => this.toggleCell(i, j)}/>\r\n                                        : <div \r\n                                        className={\"sudoku-cell c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: board[i][j].colorDisplay}}\r\n                                        onClick={() => this.toggleCell(i, j)}/>\r\n                                    )\r\n                                )\r\n                                : (i===0\r\n                                    ? (j===0\r\n                                        ? <div \r\n                                        className={\"sudoku-cell sudoku-cell-u sudoku-cell-l c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: \"#000000\"}}\r\n                                        onClick={() => this.toggleCell(i,j)}/>\r\n                                        : <div \r\n                                        className={\"sudoku-cell sudoku-cell-u c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: \"#000000\"}}\r\n                                        onClick={() => this.toggleCell(i,j)}/>\r\n                                    )\r\n                                    : (j===0\r\n                                        ? <div \r\n                                        className={\"sudoku-cell sudoku-cell-l c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: \"#000000\"}}\r\n                                        onClick={() => this.toggleCell(i,j)}/>\r\n                                        : <div \r\n                                        className={\"sudoku-cell c\"+j+\"x\"+i+\"y\"}\r\n                                        style={{backgroundColor: \"#000000\"}}\r\n                                        onClick={() => this.toggleCell(i,j)}/>\r\n                                    )\r\n                                )\r\n                                    \r\n                                }\r\n                                </div>\r\n                            ))\r\n                            }\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* <p>{board[0][0].data + \" \" + board[0][1].data + \" \" + board[0][2].data}</p> */}\r\n\r\n                <div className=\"ControlsContainer\" >\r\n                    <Grid className=\"Controls1\" container spacing={1} justify=\"center\">\r\n                        <Grid item>\r\n                            <FormControl className={clsx(classes.margin, classes.textField, classes.button)} variant=\"outlined\">\r\n                                {isRunning ?\r\n                                    <Button size=\"large\" color=\"secondary\" variant=\"contained\" className=\"button\" onClick={this.stopGame}><StopIcon/>Stop</Button> :\r\n                                    <Button size=\"large\" color=\"primary\" variant=\"contained\" className=\"button\" onClick={this.runGame}><PlayArrowIcon/>Run</Button>\r\n                                }\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControl className={clsx(classes.margin, classes.textField, classes.button)} variant=\"outlined\">\r\n                                <Button size=\"large\" variant=\"contained\" className=\"button\" onClick={this.handleRandom}>Random</Button>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControl className={clsx(classes.margin, classes.textField, classes.button)} variant=\"outlined\">\r\n                                <Button size=\"large\" variant=\"contained\" className=\"button\" onClick={this.handleClear}>Clear</Button>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControl className={clsx(classes.margin, classes.textField, classes.button)} variant=\"outlined\">\r\n                                <Button size=\"large\" variant=\"contained\" className=\"button\" onClick={this.handleDefaults}>Defaults</Button>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid>\r\n                        <Grid className=\"Controls2\" container spacing={1} justify=\"center\">\r\n                            <Grid item>\r\n                                <TextField\r\n                                    label=\"Interval speed [20,∞]\"\r\n                                    id=\"outlined-adornment-interval\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleIntervalChange}\r\n                                    value={displayinterval}\r\n                                    InputProps={{\r\n                                    endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    className: classes.input\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField \r\n                                    label=\"Colour Deviation [0,∞]\"\r\n                                    id=\"outlined-adornment-stdDevColor\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleStdDevChange}\r\n                                    value={displayStdDev}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField\r\n                                    label=\"Board size [4,100]\"\r\n                                    id=\"outlined-adornment-size\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleSizeChange}\r\n                                    value={displaysize}\r\n                                    InputProps={{\r\n                                    endAdornment: <InputAdornment position=\"end\">cells</InputAdornment>,\r\n                                    className: classes.input\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                            <TextField\r\n                                    label=\"RGB Col. Bias [0,1]\"\r\n                                    id=\"outlined-adornment-size\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleRGBMutChange}\r\n                                    value={displayRGBMutate}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid className=\"Controls2\" container spacing={1} justify=\"center\">\r\n                        <Grid item >\r\n                                <TextField \r\n                                    label=\"Mutate % [0,100]\"\r\n                                    id=\"outlined-adornment-mutationChance\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleMutateChange}\r\n                                    value={displaymutateChance}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField \r\n                                    label=\"Neighbour + % [0,100]\"\r\n                                    id=\"outlined-adornment-neighbourMutationChance\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleNieghbourMutatChange}\r\n                                    value={displayNeighbourChance}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField \r\n                                    label=\"Death % [0,100]\"\r\n                                    id=\"outlined-adornment-deathChance\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleDeathChange}\r\n                                    value={displayDeathChance}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField\r\n                                    label=\"HSL Sat+ Bias [0,1]\"\r\n                                    id=\"outlined-adornment-size\"\r\n                                    className={clsx(classes.margin, classes.textField)}\r\n                                    onChange={this.handleHSLMutChange}\r\n                                    value={displayHSLmutate}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid className=\"Controls3\" container spacing={1} justify=\"center\">\r\n                            <FormGroup row>\r\n                                <FormControlLabel\r\n                                    control={<Switch  checked={combinedMutate} onChange={this.handleMutateSwitch}\r\n                                    name=\"mutateSwitch\" />}\r\n                                    label=\"Combined Mutation NA\"\r\n                                    className={clsx(classes.margin, classes.textField, classes.radiobuttons)}\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={<Switch checked={hslSpace} onChange={this.handleHSLSpaceSwitch}\r\n                                    name=\"HSLSpaceSwitch\" />}\r\n                                    label=\"HSL Space ?\"\r\n                                    className={clsx(classes.margin, classes.textField, classes.radiobuttons)}\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={<Switch checked={polarRandom} onChange={this.handlePolarRandomSwitch}\r\n                                    name=\"polarRandomSwitch\" />}\r\n                                    label=\"Polar Random\"\r\n                                    className={clsx(classes.margin, classes.textField, classes.radiobuttons)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Game);\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//import Menu from './Menu';\nimport Game from './Game';\nimport { Container } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <div className=\"App\">\n        <Container className=\"FullPage\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1>RZevol in React</h1>\n          </header>\n          <Game/>\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}